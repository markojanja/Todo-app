(()=>{"use strict";class e{constructor(e,t="normal",n,o){this.name=e,this.status=!1,this.priority=t,this.date=o,this.projectKey=n}}class t{constructor(e){this.name=e,this.todos=[]}addTodo(t,n,o){const r=new e(t,n,this.name,o);this.todos.push(r)}deleteTodo(e){const t=this.todos.findIndex((t=>t.name===e));this.todos.splice(t,1)}updateStatus(e){this.todos.find((t=>{t.name===e&&(t.status=!t.status)}))}}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}var r={};function s(){return r}function a(e,t){var r,a,l,c,i,d,u,p;o(1,arguments);var m=s(),y=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(r=null!==(a=null!==(l=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==l?l:m.weekStartsOn)&&void 0!==a?a:null===(u=m.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==r?r:0);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var j=function(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===n(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e),k=j.getDay(),f=(k<y?7:0)+k-y;return j.setDate(j.getDate()-f),j.setHours(0,0,0,0),j}class l{constructor(){this.projectList=[]}addProjects(e){const n=new t(e);this.projectList.push(n)}deleteProjects(e){const t=this.projectList.findIndex((t=>t.name===e));this.projectList.splice(t,1)}updateProjects(e,t){const n=this.projectList.find((t=>e===t.name));return n.name=t,n}selectProject(e){return this.projectList.find((t=>e===t.name))}getAllTasks(){let e=[];return this.projectList.forEach((t=>{e=t.todos.concat(e)})),{name:"all",todos:e}}filterTodays(){return{name:"today",todos:this.projectList.reduce(((e,t)=>{const n=t.todos.filter((e=>e.date===(new Date).toDateString()));return e.concat(n)}),[])}}filterThisWeek(){return{name:"week",todos:this.projectList.reduce(((e,t)=>{const n=t.todos.filter((e=>function(e,t){return o(1,arguments),function(e,t,n){o(2,arguments);var r=a(e,n),s=a(t,n);return r.getTime()===s.getTime()}(e,Date.now(),t)}(new Date(e.date))));return e.concat(n)}),[])}}}const c=e=>{const t=document.querySelector("#project");t.innerHTML="",t.innerHTML=`\n  <h1 class='pt'>${e}</h1>\n  <ul id="taskList"></ul>\n  `};class i{static loadUI(){i.createProjectController(),i.renderProjectList(),i.setActiveProject(),i.UpdateProjectController(),i.toggleFormButtonController(),i.renderTodaysTasks(),i.renderThisWeek(),i.renderAllTasks()}static projects=new l;static toggleFormButtonController(){document.querySelector(".toggle-form").addEventListener("click",(()=>{document.getElementById("myForm").classList.toggle("show")}))}static createProjectController(){const e=document.getElementById("myForm");e.addEventListener("submit",(t=>{t.preventDefault();const n=document.getElementById("projectName");if(!n.value)return console.log("this is empty");i.projects.addProjects(n.value);const o=i.projects.selectProject(n.value);i.renderProject(o),this.renderProjectList(),e.reset(),e.classList.remove("show")}),!1)}static UpdateProjectController(){document.querySelectorAll(".project-link").forEach((e=>{e.querySelector(".btn-edit").addEventListener("click",(t=>{const n=e.querySelector(".modal");let o=t.target.dataset.value;const r=document.getElementById(`input-${o}`);r.value=o,n.style.display="flex",i.renderProject(i.projects.selectProject(o)),n.addEventListener("submit",(e=>{if(e.preventDefault(),!r.value)return console.log("this is empty");this.projects.updateProjects(o,r.value),this.renderProjectList(),o&&(o=r.value,i.renderProject(i.projects.selectProject(o))),n.reset()}))}))}))}static deleteProjectController(){const e=document.querySelectorAll(".btn-delete"),t=document.querySelector("#project");this.setActiveProject(),e.forEach((e=>{e.addEventListener("click",(e=>{const n=e.target.dataset.value;i.projects.projectList.forEach((e=>{e!==n&&(t.innerHTML="Project Deleted"),this.renderProjectList()})),i.projects.deleteProjects(n),this.renderProjectList()}))}))}static renderProjectList(){const e=document.getElementById("list");e.innerHTML="",i.projects.projectList.map((t=>{e.innerHTML+=`\n      <li class="project-link">\n        <div class="link-container">\n          <h3 class="title">${t.name}</h3>\n          <button class="btn-edit" type="button" data-value="${t.name}"><i class="fa-solid fa-pen" data-value="${t.name}"></i></button>\n          <button class="btn-delete" type="button" data-value="${t.name}"><i class="fa-solid fa-trash"></i></button>\n        </div>\n\n        <form class="modal">\n          <input type="text" class="inputVal" id="input-${t.name}" required>\n          <button class="add-btn" type="submit" id="btn3"><i class="fa-solid fa-check"></i></button>\n        </form>\n      </li>\n      `})),this.UpdateProjectController(),this.deleteProjectController()}static setActiveProject(){document.querySelectorAll(".title").forEach((e=>{e.addEventListener("click",(()=>{const t=e.textContent,n=i.projects.selectProject(t);i.renderProject(n)}),!1)}))}static renderProject(e){const t=document.querySelector("#project");t.innerHTML="",t.innerHTML=`<h1 class='pt'>${e.name}</h1>`,t.innerHTML+='\n    <form action="" id="myForm2" autocomplete="off">\n      <label for="project">Enter task name</label>\n      <input type="text" name="project" id="taskName2" required>\n      <label for="date">Pick date</label>\n      <input type="date" name="date" id="taskDate" required>\n      <label for="priority">Choose priority</label>\n        <select id="select" name="priority">\n          <option value="normal">normal</option>\n          <option value="high">high</option>\n          <option value="low">low</option>\n        </select>\n      <button type="submit" id="btn"></button>\n    </form>\n    <ul id="taskList"></ul>',i.createTaskConroller(),e.todos.length>0&&i.renderTasks(e)}static renderTasks(e){(e=>{const t=document.getElementById("taskList");t.innerHTML="",e.map((e=>{e.status?t.innerHTML+=`\n          <li class="task-card p-${e.priority}">\n          <button class="status-btn st-done" data-val="${e.name}" data-key="${e.projectKey}"></button>\n          <p class="ptt">${e.name} ${e.date}</p>\n          <button class="delete-task" data-value="${e.name}" data-keydel="${e.projectKey}"></button>\n          </li>`:t.innerHTML+=`\n          <li class="task-card p-${e.priority}">\n            <button class="status-btn" data-val="${e.name}" data-key="${e.projectKey}"></button>\n            <p class="ptt" >${e.name} ${e.date}</p>\n            <button class="delete-task" data-value="${e.name}" data-keydel="${e.projectKey}"></button>\n          </li>`}))})(e.todos),i.updateTaskController(e),i.deleteTaskController(e)}static createTaskConroller(){const e=document.getElementById("myForm2"),t=document.querySelector(".pt").textContent,n=i.projects.selectProject(t);e.addEventListener("submit",(t=>{t.preventDefault();const o=document.getElementById("taskName2"),r=document.getElementById("taskDate"),s=new Date(r.value).toDateString(),a=document.getElementById("select");n.addTodo(o.value,a.value,s),i.renderTasks(n),e.reset()}))}static updateTaskController(e){document.querySelectorAll(".status-btn").forEach((t=>{t.addEventListener("click",(t=>{let n=t.target.dataset.key,o=i.projects.selectProject(n),r=t.target.dataset.val;o.updateStatus(r),o=e,i.renderTasks(o)}))}))}static deleteTaskController(e){document.querySelectorAll(".delete-task").forEach((t=>{t.addEventListener("click",(t=>{let n=t.target.dataset.keydel,o=i.projects.selectProject(n),r=t.target.dataset.value;switch(o.deleteTodo(r),e.name){case"all":o=i.projects.getAllTasks(),i.renderTasks(o);break;case"today":o=i.projects.filterTodays(),i.renderTasks(o);break;case"week":o=i.projects.filterThisWeek(),i.renderTasks(o);break;default:o=e,i.renderTasks(o)}}))}))}static renderAllTasks(){document.getElementById("all").addEventListener("click",(()=>{c("All");let e=i.projects.getAllTasks();i.renderTasks(e)}))}static renderTodaysTasks(){document.getElementById("today").addEventListener("click",(()=>{c("Todays");let e=i.projects.filterTodays();i.renderTasks(e)}))}static renderThisWeek(){document.getElementById("week").addEventListener("click",(()=>{c("Week");let e=i.projects.filterThisWeek();i.renderTasks(e),e=i.projects.filterThisWeek()}))}}document.addEventListener("DOMContentLoaded",i.loadUI())})();